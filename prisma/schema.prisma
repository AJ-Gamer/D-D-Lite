// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                 @id @default(autoincrement())
  googleId      String              @unique
  email         String
  name          String
  characters    Character[]
  gold          Int                 @default(100)
  inventory     Inventory[]
  storyProgress UserStoryProgress[]
  Completion    Completion[]
}

model Character {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  class         String
  race          String
  constitution  Int
  strength      Int
  dexterity     Int
  charisma      Int
  image         String?
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  weapons       Weapon[]       @relation("CharacterWeapons")
  armor         Armor[]        @relation("CharacterArmor")
  items         Item[]         @relation("CharacterItems")
  equippedItems EquippedItem[]
}

model Weapon {
  id         Int         @id @default(autoincrement())
  name       String
  damage     Int
  rarity     String
  characters Character[] @relation("CharacterWeapons")
}

model Armor {
  id         Int         @id @default(autoincrement())
  name       String
  defense    Int
  rarity     String
  characters Character[] @relation("CharacterArmor")
}

model Item {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  characters  Character[] @relation("CharacterItems")
}

model Inventory {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  equipment Equipment[]
}

model EquippedItem {
  id          Int       @id @default(autoincrement())
  characterId Int
  character   Character @relation(fields: [characterId], references: [id])
  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
}

model Equipment {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  type         String // Type of equipment: armor, weapon, etc.
  inventory    Inventory      @relation(fields: [inventoryId], references: [id])
  inventoryId  Int
  owned        Int            @default(0)
  equipped     Boolean        @default(false)
  EquippedItem EquippedItem[]
}

model StoryNode {
  id          Int                 @id @default(autoincrement())
  storyId     Int                 @unique
  prompt      String              @db.Text
  options     Option[]            @relation("CurrentNode")
  nextOptions Option[]            @relation("NextNode")
  progress    UserStoryProgress[]
  endingType  String?
  goldReward  Int?
}

model Option {
  id          Int        @id @default(autoincrement())
  text        String
  storyNodeId Int
  storyNode   StoryNode  @relation("CurrentNode", fields: [storyNodeId], references: [id])
  nextNodeId  Int?
  nextNode    StoryNode? @relation("NextNode", fields: [nextNodeId], references: [id])
  result      String?
}

model UserStoryProgress {
  id            Int       @id @default(autoincrement())
  userId        Int
  characterId   Int
  user          User      @relation(fields: [userId], references: [id])
  currentNodeId Int
  currentNode   StoryNode @relation(fields: [currentNodeId], references: [id])
  @@unique([userId, characterId])
}

model Completion {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  endingType String
  timestamp  DateTime @default(now())
}
